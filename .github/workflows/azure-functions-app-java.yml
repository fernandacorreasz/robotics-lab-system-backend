name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
        
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
        
      - name: Build with Maven
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          chmod +x ./mvnw
          mvn clean install \
            -Dspring.datasource.url=$DB_URL \
            -Dspring.datasource.username=$DB_USERNAME \
            -Dspring.datasource.password=$DB_PASSWORD
            
      - name: Build Docker image
        run: |
          docker build -t robotics-lab-system-backend:latest .
          docker save robotics-lab-system-backend:latest -o robotics-lab-system-backend.tar
        
  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Deploy to Production
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_PASSWORD: ${{ secrets.PROD_PASSWORD }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          sshpass -p "$PROD_PASSWORD" scp -o StrictHostKeyChecking=no robotics-lab-system-backend.tar $PROD_USER@$PROD_HOST:/tmp
          sshpass -p "$PROD_PASSWORD" ssh -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST "
            docker load -i /tmp/robotics-lab-system-backend.tar && 
            rm /tmp/robotics-lab-system-backend.tar && 
            docker image prune -f &&
            docker run -d -p 8080:8080 \
              -e DB_URL=$DB_URL \
              -e DB_USERNAME=$DB_USERNAME \
              -e DB_PASSWORD=$DB_PASSWORD \
              --name robotics-lab-system-backend robotics-lab-system-backend:latest"
